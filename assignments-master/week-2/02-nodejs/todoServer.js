// /**
//   You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
//   - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
//   - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

//   Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,
//   1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos
    
//   2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123
    
//   3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
//   4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }
    
//   5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

//     - For any other route not defined in the server return 404

//   Testing the server - run `npm run test-todoServer` command in terminal
//  */
// const express = require('express');
// const bodyParser = require('body-parser');

// const app = express();

// app.use(bodyParser.json());

// let myTodo = [{
//   id: 1,
//   title: "filstTodo",
//   description: "test description"
// }];

// // 1.GET /todos - Retrieve all todo items
// //     Description: Returns a list of all todo items.
// //     Response: 200 OK with an array of todo items in JSON format.
// //     Example: GET http://localhost:3000/todos

// app.get('/todos', (req, res) => {
//   res.status(200).json({ myTodo });
// })



// //   2.GET /todos/:id - Retrieve a specific todo item by ID
// //     Description: Returns a specific todo item identified by its ID.
// //     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
// //     Example: GET http://localhost:3000/todos/123

// app.get('/todos/:id', (req, res) => {
//   const givenId = req.params.id;
//   let ourTodo;
//   for (let todo of myTodo) {
//     if (todo.id = givenId) {
//       ourTodo = todo;
//       break;
//     }
//   }
//   res.status(200).send(ourTodo);
// })


// //   3. POST /todos - Create a new todo item
// //     Description: Creates a new todo item.
// //     Request Body: JSON object representing the todo item.
// //     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
// //     Example: POST http://localhost:3000/todos
// //     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

// app.post('/todos', (req, res) => {
//   const todoObj = { id: myTodo.length + 1, "title": "Buy groceries", "completed": false, description: "I should buy groceries" };
//   myTodo.push(todoObj);
//   res.status(200).send("Todo created successfully");
// })

// //   4. PUT /todos/:id - Update an existing todo item by ID
// //     Description: Updates an existing todo item identified by its ID.
// //     Request Body: JSON object representing the updated todo item.
// //     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
// //     Example: PUT http://localhost:3000/todos/123
// //     Request Body: { "title": "Buy groceries", "completed": true }


// app.put('/todos/:id', (req, res) => {
//   const getId = req.params.id;
//   const updatedObj = { id: getId, "title": "Buy groceries6666666666", "completed": true };
//   for (let todo of myTodo) {
//     if (todo.id == getId) {
//       todo.title = updatedObj.title
//       todo.completed = updatedObj.completed;
//     }
//   }
//   res.status(200).send("updated successfully");
// })

// //   5. DELETE /todos/:id - Delete a todo item by ID
// //     Description: Deletes a todo item identified by its ID.
// //     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
// //     Example: DELETE http://localhost:3000/todos/123

// app.delete('/todos/:id', (req, res) => {
//   const getId = req.params.id;
//   const index = myTodo.findIndex(todo => todo.id == getId);

//   myTodo.splice(index, 1);

//   res.status(200).send("deleted successfully");
// })




// //     - For any other route not defined in the server return 404

// // app.get('*', (req, res) => {
// // res.status(404).send("Not Found!!!");
// // });

// // 404 route for any other route not defined
// app.use((req, res) => {
//   res.status(404).send("Not Found!!!!");
// });




// app.listen(3000, () => {
//   console.log("app is listening at port 3000");
// })

// module.exports = app;




const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

// Load existing todos from file or initialize an empty array
let myTodo = loadTodosFromFile();

// Function to load todos from file
function loadTodosFromFile() {
  try {
    const data = fs.readFileSync('todos.json');
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
}

// Function to save todos to file
function saveTodosToFile() {
  fs.writeFileSync('todos.json', JSON.stringify(myTodo));
}

// 1.GET /todos - Retrieve all todo items
app.get('/todos', (req, res) => {
  res.status(200).json(myTodo);
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get('/todos/:id', (req, res) => {
  const givenId = req.params.id;
  const ourTodo = myTodo.find((todo) => todo.id == givenId);

  if (ourTodo) {
    res.status(200).json(ourTodo);
  } else {
    res.status(404).send('Not Found');
  }
});

// 3. POST /todos - Create a new todo item
app.post('/todos', (req, res) => {
  const { title, completed, description } = req.body;
  const todoObj = { id: myTodo.length + 1, title, completed, description };
  myTodo.push(todoObj);
  saveTodosToFile(); // Save todos to file
  res.status(201).json({ id: todoObj.id });
});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put('/todos/:id', (req, res) => {
  const getId = req.params.id;
  const updatedObj = req.body;

  const index = myTodo.findIndex((todo) => todo.id == getId);

  if (index !== -1) {
    myTodo[index] = { ...myTodo[index], ...updatedObj };
    saveTodosToFile(); // Save todos to file
    res.status(200).send('Updated successfully');
  } else {
    res.status(404).send('Not Found');
  }
});

// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete('/todos/:id', (req, res) => {
  const getId = req.params.id;
  const index = myTodo.findIndex((todo) => todo.id == getId);

  if (index !== -1) {
    myTodo.splice(index, 1);
    saveTodosToFile(); // Save todos to file
    res.status(200).send('Deleted successfully');
  } else {
    res.status(404).send('Not Found');
  }
});

// 404 route for any other route not defined
app.use((req, res) => {
  res.status(404).send('Not Found!!!!');
});

app.listen(3003, () => {
  console.log('app is listening at port 3003');
});

module.exports = app;
